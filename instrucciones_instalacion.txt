INSTRUCCIONES DE INSTALACIÓN MIPECUARIO WEB BACKEND (2025/06/21)
==========================================================

0. INSTALACIÓN Y USO DE POETRY
------------------------------
- Poetry es el gestor de dependencias y entornos virtuales recomendado para este proyecto.
- Instala Poetry en tu sistema (no dentro del repositorio):
  - En Windows PowerShell:
    (Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | python -
  - En Linux/Mac:
    curl -sSL https://install.python-poetry.org | python3 -
- Cierra y vuelve a abrir la terminal, o agrega Poetry al PATH si es necesario.
- Verifica la instalación con:
  poetry --version
- No subas ni instales Poetry dentro del repositorio, cada usuario debe instalarlo en su sistema.
- Si tienes problemas con la instalación, consulta la documentación oficial: https://python-poetry.org/docs/

1. CLONAR EL REPOSITORIO
------------------------
git clone <URL_DEL_REPO>
cd <NOMBRE_DEL_REPO>

2. INSTALAR DEPENDENCIAS CON POETRY
-----------------------------------
poetry install
- Esto creará un entorno virtual y descargará todas las dependencias listadas en pyproject.toml y poetry.lock.
- Si agregas nuevas dependencias, usa:
  poetry add <paquete>
- Para dependencias de desarrollo:
  poetry add --dev <paquete>
- Para actualizar todas las dependencias:
  poetry update
- Para actualizar una dependencia específica:
  poetry update <paquete>

3. CONFIGURAR VARIABLES DE ENTORNO
----------------------------------
- Crea un archivo .env en la raíz del proyecto (puedes copiar y renombrar .env.example).
- .env.example contiene todas las claves necesarias y valores de ejemplo para facilitar la configuración.
- Debe contener las variables: DB_USER, DB_PASSWORD, DB_HOST, DB_PORT, DB_NAME, NGROK_AUTH_TOKEN, SMTP_SERVER, SMTP_USER, SMTP_PASSWORD, etc.

4. ACTIVAR EL ENTORNO VIRTUAL
-----------------------------
poetry shell
- Esto activa el entorno virtual creado por Poetry.
- Todos los comandos de Python y Flask deben ejecutarse dentro de este entorno.

5. EJECUTAR LA API
------------------
python app.py
- Esto inicia Flask y expone la API automáticamente con ngrok.
- La URL pública aparecerá en consola.

6. ESTRUCTURA DEL PROYECTO
--------------------------
- app.py: punto de entrada principal.
- routes/: rutas de la API (auth, user, lote, animal).
- models/: modelos SQLAlchemy.
- db/: configuración de la base de datos.
- schemas/: validaciones Pydantic.
- utils/: utilidades (JWT, email, etc).
- legacy/: archivos antiguos, no usarlos para desarrollo.

7. NOTAS Y BUENAS PRÁCTICAS
---------------------------
- No subas .env al repositorio, provee .env.example.
- Usa imports absolutos y ejecuta siempre desde la raíz.
- Si agregas dependencias, usa poetry add <paquete>.
- Si tienes problemas de importación, revisa los __init__.py.
- Elimina archivos legacy solo si no los necesitas.
- Documenta cualquier cambio importante en la estructura.
- Consulta la documentación oficial de Poetry para resolver dudas: https://python-poetry.org/docs/

8. USO BÁSICO DE GIT PARA TRABAJO EN EQUIPO
-------------------------------------------
- Para agregar archivos nuevos o modificados al área de preparación:
  git add <archivo>            # O usa git add . para todos los archivos
- Para guardar los cambios en el historial local:
  git commit -m "Mensaje claro de lo que hiciste"
- Para enviar tus cambios al repositorio remoto:
  git push
- Para traer los últimos cambios del repositorio remoto:
  git pull
- Para ver el estado de tus archivos:
  git status
- Para ver el historial de commits:
  git log
- Recomendaciones:
  - Haz commits frecuentes y con mensajes descriptivos.
  - Haz pull antes de empezar a trabajar para evitar conflictos.
  - No subas archivos sensibles como .env.
  - Usa ramas (branches) para nuevas funcionalidades si el equipo lo requiere.
