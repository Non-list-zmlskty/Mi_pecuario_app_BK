"Camila, realicé estos cambios debido a que consideré que la estructura y organización anterior podía verse muy hostil y larga, 
además de incomprensible por momentos. Busco que entiendas de la mejor forma todo lo que será dado en la organización de esta documentación.
 Cualquier cosa estaré pendiente a tu respuesta, pregunta todo y más sobre lo que entiendas y no entiendas o encuentres irrazonable" -
  sin mucha dedicación, Juan.

DOCUMENTACIÓN BACKEND MIPECUARIO (2024)
========================================

# INTRODUCCIÓN GENERAL
----------------------
Esta documentación está pensada para personas que manejan bases de datos y tienen poco o ningún conocimiento sobre cómo funciona un backend, especialmente en este proyecto. Aquí te explico de forma sencilla cómo se conecta y organiza el backend con la base de datos, cómo se comunican, y por qué tu trabajo es fundamental para que todo funcione correctamente.

# ¿QUÉ ES EL BACKEND?
---------------------
El backend es la parte del sistema que se encarga de recibir las solicitudes de la app o la web, procesarlas y devolver respuestas. Por ejemplo, cuando alguien registra un animal, el backend recibe esos datos y los guarda en la base de datos. El backend también consulta la base de datos para mostrar información en la app.

# 1. ESTRUCTURA Y ORGANIZACIÓN DEL PROYECTO
--------------------------------------------
- El backend está modularizado usando Blueprints de Flask.
- Cada dominio (auth, user, lote, animal) tiene su propio archivo en `routes/`.
- Modelos SQLAlchemy en `models/models.py`.
- Conexión a base de datos centralizada en `db/session.py` usando variables de entorno (`.env`).
- Utilidades (JWT, email, etc.) en `utils/`.
- Validaciones en `schemas/`.
- Archivos legacy solo como referencia.

# 1.1. CAMBIOS RECIENTES EN routes/animal_routes.py (JUNIO 2025)
-----------------------------------------------------------------
- Ahora el endpoint `/api/animal/registrar` permite registrar el peso inicial de un animal representativo del lote al crear la ficha. Este peso se guarda en la tabla `PesoLote` y es usado para todos los cálculos de dieta y seguimiento.
- Se agregó la posibilidad de registrar el nombre del animal al crear la ficha. Si no se envía, se asigna un nombre por defecto.
- Se añadió el endpoint `/api/animal/lote/<lote_id>/peso` (POST) para registrar o actualizar el peso de un lote en cualquier momento, permitiendo el seguimiento real del estado del lote.
- El endpoint `/api/animal/lote/<lote_id>/dieta` ahora siempre utiliza el peso más reciente registrado en `PesoLote` para calcular la dieta personalizada.
- Todos los endpoints de animal ahora validan que el usuario autenticado sea dueño del lote/ficha antes de mostrar, modificar o eliminar datos.
- Se mejoró el manejo de errores: ahora los mensajes de error incluyen detalles útiles para depuración cuando ocurre un error 500.
- Se recomienda validar en el frontend que el peso esté en el rango permitido por la base de datos (actualmente 300-700 kg) antes de enviar el formulario.
- El endpoint `/api/animal/mis-fichas` retorna todas las fichas/lotes del usuario autenticado, incluyendo los cálculos de peso y fecha de última actualización.
- El endpoint `/api/animal/ficha/<lote_id>` retorna el detalle de la ficha, usando los datos reales del lote y animal.
- El endpoint `/api/animal/lote/<lote_id>/pesos` retorna el peso general y promedio individual del lote, usando el peso real si existe, o un estimado si no hay registro.
- Se mantiene la lógica para que todos los cálculos de dieta y seguimiento sean sobre datos reales y actualizados, permitiendo un mejor control y personalización para el usuario.

# 1.2. NOTAS PARA EL DESARROLLADOR DE BASES DE DATOS
-----------------------------------------------------
- Si cambias la estructura de la tabla `PesoLote`, asegúrate de que los endpoints de animal sigan funcionando correctamente.
- El trigger en la base de datos para validar el rango de peso fue actualizado a 300-700 kg. Si necesitas cambiar este rango, actualiza el trigger y notifica al equipo de frontend para que ajusten la validación.
- Si agregas nuevos campos a las tablas `Lote`, `Animal` o `PesoLote`, recuerda actualizar los modelos en `models/models.py` y revisar los endpoints en `routes/animal_routes.py`.
- El backend depende de la integridad referencial entre `Lote`, `Animal` y `PesoLote` para eliminar correctamente los datos relacionados cuando se elimina un lote.
- Si necesitas agregar nuevas funcionalidades de seguimiento o cálculo, consulta primero la lógica actual en `routes/animal_routes.py` para mantener la coherencia.

# 1.3. FLUJO DE REGISTRO Y SEGUIMIENTO DE FICHAS/LOTES
------------------------------------------------------
- El usuario registra una ficha/lote enviando género, propósito, raza, cantidad y peso inicial (opcional pero recomendado).
- El backend guarda el lote, el animal representativo y el peso inicial en la base de datos.
- El usuario puede registrar nuevos pesos para el lote en cualquier momento usando `/api/animal/lote/<lote_id>/peso`.
- El cálculo de dieta y seguimiento siempre usa el peso más reciente registrado.
- Todos los endpoints validan la propiedad del usuario sobre el lote antes de mostrar o modificar datos.

# 1.4. EJEMPLOS DE REQUEST Y RESPUESTA ACTUALIZADOS
---------------------------------------------------
- Registrar ficha/lote:
  ```
  POST /api/animal/registrar
  {
    "genero": "Hembra",
    "proposito": "Lechera",
    "raza": "Nelore",
    "cantidad": 10,
    "peso": 480,
    "nombre_animal": "Vaca Ejemplo"
  }
  ```
- Registrar nuevo peso:
  ```
  POST /api/animal/lote/12/peso
  {
    "peso": 500,
    "fecha": "2025-06-23"
  }
  ```
- Obtener dieta personalizada:
  ```
  GET /api/animal/lote/12/dieta
  ```
  Respuesta:
  ```json
  {
    "lote_id": 12,
    "nombre_lote": "Lote Lechera 1234",
    "proposito": "Lechera",
    "cantidad_animales": 10,
    "peso_promedio_individual": 480,
    "peso_promedio_individual_unidad": "kg",
    "peso_total_lote": 4800,
    "peso_total_lote_unidad": "kg",
    "rango": "medio",
    "mensaje": "El peso promedio es adecuado. Se recomienda una dieta de mantenimiento.",
    "materia_seca_recomendada_por_bovino": 12000,
    "materia_seca_recomendada_por_bovino_unidad": "g",
    "materia_seca_recomendada_total": 120000,
    "materia_seca_recomendada_total_unidad": "g",
    "dieta": [
      {
        "alimento": "Forraje Verde",
        "cantidad_recomendada_por_bovino": 4000.0,
        "cantidad_recomendada_por_bovino_unidad": "g",
        "cantidad_recomendada_total": 40000.0,
        "cantidad_recomendada_total_unidad": "g",
        "frecuencia": "Diaria"
      }
    ]
  }
  ```

# 2. ¿CÓMO SE CONECTA EL BACKEND A LA BASE DE DATOS?
----------------------------------------------------
El backend usa un archivo llamado `.env` donde se guardan los datos de conexión (usuario, contraseña, nombre de la base, etc.). Así, si cambias algo en la base de datos, solo tienes que actualizar este archivo.

Ejemplo de `.env`:
```
DB_USER=tu_usuario
DB_PASSWORD=tu_contraseña
DB_HOST=127.0.0.1
DB_PORT=3306
DB_NAME=MiPecuarioWed
JWT_SECRET_KEY=tu_clave_secreta
```
El archivo `db/session.py` lee estos datos y permite que el backend hable con la base de datos.

# 3. ¿CÓMO SE RELACIONA TU TRABAJO CON EL BACKEND?
--------------------------------------------------
Cada vez que creas o modificas una tabla, el backend debe saberlo para poder guardar o leer datos correctamente. Por eso, los modelos en `models/models.py` deben estar sincronizados con la estructura real de la base de datos.

Por ejemplo:
- Si agregas un campo nuevo a la tabla `Lote`, hay que agregarlo también en el modelo `Lote` en Python.
- Si cambias el tipo de dato de un campo, hay que actualizarlo en el modelo.

# 4. ¿CÓMO FUNCIONAN LOS ENDPOINTS?
------------------------------------
Un endpoint es como una "puerta" por donde la app pide o envía información. Por ejemplo:
- `/api/animal/registrar`: la app envía los datos de un nuevo animal y el backend los guarda en la base de datos.
- `/api/animal/mis-fichas`: la app pide la lista de fichas (lotes) y el backend responde con los datos que están en la base.

Todos los endpoints importantes están protegidos con un sistema de seguridad llamado JWT (token), para que solo usuarios autenticados puedan acceder.

# 5. AUTENTICACIÓN Y TOKENS JWT
-------------------------------
- Los tokens JWT ahora usan la clave secreta y expiraciones definidas en `.env`.
- El access token dura 12 horas, el refresh token 30 días.
- El backend lee la clave secreta con `os.environ.get("JWT_SECRET_KEY")`.
- El frontend puede usar el mismo token varias veces hasta que expire.
- Se corrigió el bug donde el token expiraba demasiado rápido.
- El refresh token permite renovar el access token sin reloguear.

# 6. BASE DE DATOS Y MODELOS
----------------------------
- El campo `cantidad` en la tabla `Lote` ahora se actualiza correctamente y es usado para cálculos de peso.
- Se corrigieron registros nulos en `cantidad` con un update masivo.
- Los modelos reflejan la estructura real de la base de datos.
- Los cálculos de peso promedio individual y total usan correctamente los datos de `PesoLote` y `cantidad`.

# 7. ENDPOINTS Y LÓGICA DE NEGOCIO
----------------------------------
- `/api/animal/registrar`: Registra un lote y animales, guarda la cantidad.
- `/api/animal/mis-fichas`: Devuelve fichas del usuario, incluye cálculos de peso.
- `/api/animal/ficha/<lote_id>`: Devuelve detalle y cálculos de una ficha/lote.
- `/api/animal/lote/<lote_id>/pesos`: Devuelve peso total y promedio individual, usando peso real o estimado si no hay registro.
- `/api/lote/registrar`: Registra un nuevo lote.
- `/api/lote/mis-lotes`: Devuelve lotes del usuario.
- `/api/user/profile`: Devuelve perfil del usuario autenticado.
- Todos los endpoints protegidos usan el decorador `@token_required` que valida el JWT.

# 8. MANEJO DE ERRORES Y SEGURIDAD
----------------------------------
- Mejor manejo de errores en autenticación (401 para token expirado, inválido o revocado).
- Uso de blocklist para tokens revocados (logout).
- Validación de datos de entrada con Pydantic en `schemas/`.
- Manejo de errores de base de datos y lógica de negocio.

# 9. CONFIGURACIÓN Y VARIABLES DE ENTORNO
-----------------------------------------
- `.env` contiene todas las variables sensibles y de configuración.
- `config.py` y utilidades leen las variables desde el entorno.
- Ejemplo de `.env`:
  ```
  DB_USER=...
  DB_PASSWORD=...
  JWT_SECRET_KEY=...
  ```

# 10. RECOMENDACIONES Y BUENAS PRÁCTICAS
----------------------------------------
- Siempre registrar la cantidad de animales al crear un lote.
- Mantener sincronizados los relojes del servidor y clientes para evitar problemas de expiración de tokens.
- Usar Postman o herramientas similares para probar los endpoints.
- Revisar los logs del backend para depurar errores de autenticación o datos.
- Si agregas o quitas animales de un lote, actualiza el campo `cantidad`.
- Si tienes dudas sobre cómo se usan los datos en el backend, pregunta al equipo.
- Usa herramientas como DBeaver o phpMyAdmin para revisar los datos y asegurarte de que todo esté bien.

# 11. CAMBIOS RECIENTES Y BUGS SOLUCIONADOS
-------------------------------------------
- Centralización de la clave secreta JWT y expiraciones.
- Corrección de bug de expiración temprana de tokens.
- Actualización masiva de campo `cantidad` en lotes existentes.
- Mejoras en la consulta y cálculo de pesos.
- Refactorización de rutas y modularización.
- Documentación y ejemplos actualizados para el equipo frontend.

# 12. EJEMPLOS DE USO Y RESPUESTAS
----------------------------------
- Ver ejemplos de requests y responses en los endpoints de animal y lote.
- El frontend debe consumir los campos tal como los envía el backend (`peso_individual_estimado`, `peso_general_lote`, etc.).

# 13. CONTACTO Y SOPORTE
------------------------
- Si tienes dudas, revisa esta documentación y los comentarios en el código.
- Pregunta cualquier cosa al equipo de backend para aclarar lógica o estructura.

# 14. MENSAJE FINAL PARA CAMILA
-------------------------------
Camila PORFAVOR si terminaste de leer todo esto ESCRIBEME el codigo 1212424 para saber que entendiste y leiste esta documentacion dedicada para tu entendimiento sobre este proyecto en lo que respecta a tu parte e involucracion con esta.

FIN DE DOCUMENTACIÓN ACTUALIZADA (JUNIO 2025)