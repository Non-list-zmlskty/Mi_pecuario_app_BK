Camila, realicé estos cambios debido a que consideré que la estructura y organización anterior podía verse muy hostil y larga, 
además de incomprensible por momentos. Busco que entiendas de la mejor forma todo lo que será dado en la organización de esta documentación.
 Cualquier cosa estaré pendiente a tu respuesta, pregunta todo y más sobre lo que entiendas y no entiendas o encuentres irrazonable - sin mucha dedicación, Juan.

DOCUMENTACIÓN BACKEND MIPECUARIO (2024)
========================================

# 1. ESTRUCTURA Y ORGANIZACIÓN DEL PROYECTO
--------------------------------------------
El backend ahora está organizado en módulos y Blueprints para que cada parte del sistema sea independiente, legible y fácil de mantener. Antes, todo estaba en un solo archivo grande, lo que dificultaba la comprensión y el mantenimiento. Ahora:
- **routes/**: contiene los endpoints de la API, separados por dominio (auth, user, lote, animal).
- **models/**: contiene los modelos SQLAlchemy que representan las tablas de la base de datos.
- **db/session.py**: configuración de la conexión a la base de datos usando variables de entorno.
- **schemas/**: validaciones y esquemas Pydantic.
- **utils/**: utilidades como JWT, email, etc.
- **legacy/**: archivos antiguos, solo referencia.

# 2. CONEXIÓN CON LA BASE DE DATOS
----------------------------------
La conexión se realiza en `db/session.py` usando SQLAlchemy y las variables de entorno del archivo `.env`. Ejemplo de conexión:

```
DB_USER=usuario
DB_PASSWORD=contraseña
DB_HOST=127.0.0.1
DB_PORT=3306
DB_NAME=MiPecuarioWed
```

El archivo `db/session.py` carga estas variables y crea el engine y la sesión para todas las operaciones con la base de datos.

# 3. MODELOS (models/models.py)
-------------------------------
Cada clase representa una tabla en la base de datos. Ejemplo:
- **Usuario**: usuarios del sistema.
- **Lote**: lotes de ganado asociados a un usuario.
- **Animal**: animales asociados a un lote.
- **Grupo, Alimento, NutriAlimento, SeguimientoAlimento, PesoLote, Alertas**: otras entidades relacionadas.

Cada modelo hereda de `Base` y define sus columnas y relaciones.

# 4. RUTAS Y ENDPOINTS (routes/)
---------------------------------
Cada archivo en `routes/` es un Blueprint de Flask que agrupa endpoints relacionados.

## 4.1. animal_routes.py
- **/api/animal/registrar [POST]**: Registra un grupo de animales en un nuevo lote.
  - **Body JSON ejemplo:**
    ```json
    {
      "genero": "Hembra",
      "proposito": "Lechera",
      "raza": "Holstein",
      "cantidad": 10
    }
    ```
  - **Respuesta exitosa:**
    ```json
    {
      "message": "Ficha registrada exitosamente. 10 animales guardados.",
      "lote_id": 5,
      "animales": [
        {"id": 21, "genero": "Hembra", "raza": "Holstein", "lote_id": 5},
        ...
      ]
    }
    ```
- **/api/animal/mis-fichas [GET]**: Devuelve todas las fichas (grupos de animales) del usuario, agrupadas por lote.
  - **Respuesta ejemplo:**
    ```json
    {
      "fichas": [
        {"lote_id": 5, "nombre_lote": "Lote Lechera 1234", "genero": "Hembra", "raza": "Holstein", "cantidad": 10},
        ...
      ]
    }
    ```

## 4.2. lote_routes.py
- **/api/lote/registrar [POST]**: Registra un nuevo lote para el usuario autenticado.
  - **Body JSON ejemplo:**
    ```json
    {"nombre": "Lote 1", "grupo_id": 2}
    ```
- **/api/lote/mis-lotes [GET]**: Devuelve todos los lotes del usuario.

## 4.3. Cálculos de animales (peso promedio y total)
- Puedes agregar un endpoint tipo `/api/animal/calculo-pesos` que reciba género, propósito y cantidad, y devuelva el peso promedio individual y total:
  - **Body JSON ejemplo:**
    ```json
    {"genero": "Hembra", "proposito": "Lechera", "cantidad": 10}
    ```
  - **Respuesta ejemplo:**
    ```json
    {"peso_promedio_individual": 550, "peso_total_lote": 5500, "genero": "Hembra", "proposito": "Lechera", "cantidad": 10}
    ```

# NUEVO: CONSULTA DETALLADA DE FICHA POR LOTE
---------------------------------------------
- **/api/animal/ficha/<lote_id> [GET]**: Devuelve los datos y cálculos de la ficha seleccionada (lote).
  - **Uso:** El frontend puede cambiar de ficha (lote) y mostrar los datos y cálculos correspondientes sin recalcular en el cliente.
  - **Respuesta ejemplo:**
    ```json
    {
      "lote_id": 5,
      "nombre_lote": "Lote Lechera 1234",
      "genero": "Hembra",
      "proposito": "Lechera",
      "raza": "Holstein",
      "cantidad": 100,
      "peso_promedio_individual": 550,
      "peso_total_lote": 55000
    }
    ```
- **Intención:** Permitir que el frontend consulte y muestre los datos y cálculos de cualquier ficha/lote de forma dinámica, facilitando la navegación y el análisis para el usuario.
- **Mensaje para Camila:** Ahora puedes ver cómo cada ficha (lote) puede ser consultada de forma independiente y los cálculos se hacen en el backend, asegurando consistencia y facilidad de uso para el frontend.

# 5. FORMULARIO DE REGISTRO DE GANADO (FRONTEND)
------------------------------------------------
El formulario que ves en la app móvil envía los datos a `/api/animal/registrar` usando los campos género, propósito, raza y cantidad. El backend los recibe, crea el lote y los animales, y responde con la información registrada.

# 6. CASOS DE USO Y PRUEBAS CON POSTMAN
---------------------------------------
- **Registrar animales:**
  - Endpoint: POST `/api/animal/registrar`
  - Body: (ver ejemplo arriba)
  - Header: Authorization: Bearer <token>
- **Consultar fichas:**
  - Endpoint: GET `/api/animal/mis-fichas`
  - Header: Authorization: Bearer <token>
- **Registrar lote:**
  - Endpoint: POST `/api/lote/registrar`
  - Body: {"nombre": "Lote 1", "grupo_id": 2}
  - Header: Authorization: Bearer <token>
- **Consultar lotes:**
  - Endpoint: GET `/api/lote/mis-lotes`
  - Header: Authorization: Bearer <token>

# 7. POR QUÉ SE CAMBIÓ LA ORGANIZACIÓN
--------------------------------------
Antes, todo estaba en un solo archivo, lo que hacía difícil entender, mantener y escalar el sistema. Ahora, cada parte está separada:
- **Rutas**: cada dominio tiene su archivo.
- **Modelos**: todos en un solo lugar.
- **Conexión a base de datos**: centralizada y usando variables de entorno.
- **Utilidades**: JWT, email, etc., en archivos aparte.
Esto facilita el trabajo en equipo, la depuración y la extensión del sistema.

# 8. MENSAJES Y UTILIDAD DE CADA PARTE DEL CÓDIGO
--------------------------------------------------
- **routes/animal_routes.py**: lógica de registro y consulta de animales.
- **routes/lote_routes.py**: lógica de registro y consulta de lotes.
- **models/models.py**: definición de las tablas y relaciones de la base de datos.
- **db/session.py**: conexión y sesión con la base de datos.
- **utils/jwt_utils.py**: autenticación y protección de rutas.
- **schemas/**: validación de datos de entrada.
- **legacy/**: archivos antiguos, no usarlos para desarrollo.

# 9. RECOMENDACIONES FINALES
----------------------------
- Lee y sigue las instrucciones de instalación.
- Usa Postman para probar los endpoints con los ejemplos dados.
- Si tienes dudas, revisa los comentarios en el código y esta documentación.
- No dudes en preguntar cualquier cosa, por mínima que sea.